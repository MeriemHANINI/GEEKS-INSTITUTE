import json
import os
from datetime import datetime, timedelta
from config.settings import Config

class CostMonitor:
    """Surveillance avanc√©e des co√ªts GPT-4.1"""
    
    def __init__(self):
        self.config = Config()
        self.usage_file = "data/usage_log.json"
        self._ensure_data_directory()
        self.load_usage_data()
    
    def _ensure_data_directory(self):
        """Cr√©e le dossier data s'il n'existe pas"""
        os.makedirs("data", exist_ok=True)
    
    def load_usage_data(self):
        """Charge l'historique d'utilisation"""
        try:
            with open(self.usage_file, 'r', encoding='utf-8') as f:
                self.usage_data = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.usage_data = {
                "daily_usage": [],
                "total_cost": 0.0,
                "total_requests": 0,
                "total_tokens": 0
            }
    
    def save_usage_data(self):
        """Sauvegarde les donn√©es d'utilisation"""
        try:
            with open(self.usage_file, 'w', encoding='utf-8') as f:
                json.dump(self.usage_data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde usage: {e}")
    
    def log_usage(self, model: str, tokens: int, cost: float, user_message: str = ""):
        """Enregistre une utilisation avec contexte"""
        today = datetime.now().strftime("%Y-%m-%d")
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Trouve ou cr√©e l'entr√©e du jour
        daily_entry = next(
            (entry for entry in self.usage_data["daily_usage"] if entry["date"] == today), 
            None
        )
        
        if not daily_entry:
            daily_entry = {
                "date": today, 
                "tokens": 0, 
                "cost": 0.0, 
                "requests": 0,
                "details": []
            }
            self.usage_data["daily_usage"].append(daily_entry)
        
        # Met √† jour les stats globales
        daily_entry["tokens"] += tokens
        daily_entry["cost"] += cost
        daily_entry["requests"] += 1
        
        # Ajoute le d√©tail de la requ√™te
        daily_entry["details"].append({
            "timestamp": now,
            "model": model,
            "tokens": tokens,
            "cost": cost,
            "message_preview": user_message[:100] + "..." if len(user_message) > 100 else user_message
        })
        
        # Met √† jour les totaux globaux
        self.usage_data["total_cost"] += cost
        self.usage_data["total_requests"] += 1
        self.usage_data["total_tokens"] += tokens
        
        # Sauvegarde
        self.save_usage_data()
        
        # Avertissements
        self._check_limits(daily_entry)
        
        return daily_entry["cost"]
    
    def _check_limits(self, daily_entry: dict):
        """V√©rifie les limites et envoie des avertissements"""
        current_cost = daily_entry["cost"]
        max_daily = self.config.MAX_COST_PER_DAY
        
        if current_cost > max_daily * 0.9:  # 90% du budget
            print(f"üö® CRITIQUE: {current_cost:.2f}‚Ç¨/{max_daily}‚Ç¨ utilis√©s aujourd'hui!")
        elif current_cost > max_daily * 0.7:  # 70% du budget
            print(f"‚ö†Ô∏è  ATTENTION: {current_cost:.2f}‚Ç¨/{max_daily}‚Ç¨ utilis√©s aujourd'hui")
        elif current_cost > max_daily * 0.5:  # 50% du budget
            print(f"üìä INFO: {current_cost:.2f}‚Ç¨/{max_daily}‚Ç¨ utilis√©s aujourd'hui")
    
    def get_daily_report(self, date: str = None) -> str:
        """G√©n√®re un rapport quotidien d√©taill√©"""
        if not date:
            date = datetime.now().strftime("%Y-%m-%d")
        
        daily_entry = next(
            (entry for entry in self.usage_data["daily_usage"] if entry["date"] == date), 
            None
        )
        
        if not daily_entry:
            return f"üìä Aucune utilisation enregistr√©e pour {date}"
        
        avg_cost_per_request = daily_entry["cost"] / daily_entry["requests"] if daily_entry["requests"] > 0 else 0
        remaining_budget = max(0, self.config.MAX_COST_PER_DAY - daily_entry["cost"])
        
        report = f"""
üìä RAPPORT D√âTAILL√â GPT-4.1 - {date}
{'=' * 50}
‚Ä¢ üì® Requ√™tes aujourd'hui: {daily_entry['requests']}
‚Ä¢ üßÆ Tokens utilis√©s: {daily_entry['tokens']:,}
‚Ä¢ üí∞ Co√ªt aujourd'hui: {daily_entry['cost']:.4f}‚Ç¨
‚Ä¢ üìà Co√ªt moyen/requ√™te: {avg_cost_per_request:.4f}‚Ç¨
‚Ä¢ üíµ Budget restant: {remaining_budget:.2f}‚Ç¨
‚Ä¢ üìâ Pourcentage utilis√©: {(daily_entry['cost'] / self.config.MAX_COST_PER_DAY * 100):.1f}%

üìà STATISTIQUES GLOBALES:
‚Ä¢ üèÅ Total requ√™tes: {self.usage_data['total_requests']:,}
‚Ä¢ üßÆ Total tokens: {self.usage_data['total_tokens']:,}
‚Ä¢ üí≥ Co√ªt total: {self.usage_data['total_cost']:.4f}‚Ç¨
        """
        
        return report
    
    def get_weekly_report(self) -> str:
        """G√©n√®re un rapport hebdomadaire"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        weekly_data = {
            "total_requests": 0,
            "total_tokens": 0,
            "total_cost": 0.0,
            "days": []
        }
        
        for daily_entry in self.usage_data["daily_usage"]:
            entry_date = datetime.strptime(daily_entry["date"], "%Y-%m-%d")
            if start_date <= entry_date <= end_date:
                weekly_data["total_requests"] += daily_entry["requests"]
                weekly_data["total_tokens"] += daily_entry["tokens"]
                weekly_data["total_cost"] += daily_entry["cost"]
                weekly_data["days"].append(daily_entry)
        
        avg_daily_cost = weekly_data["total_cost"] / len(weekly_data["days"]) if weekly_data["days"] else 0
        
        return f"""
üìÖ RAPPORT HEBDOMADAIRE GPT-4.1
{'=' * 45}
‚Ä¢ üìÖ P√©riode: {start_date.strftime('%d/%m')} - {end_date.strftime('%d/%m/%Y')}
‚Ä¢ üì® Total requ√™tes: {weekly_data['total_requests']:,}
‚Ä¢ üßÆ Total tokens: {weekly_data['total_tokens']:,}
‚Ä¢ üí∞ Co√ªt total: {weekly_data['total_cost']:.4f}‚Ç¨
‚Ä¢ üìä Co√ªt moyen/jour: {avg_daily_cost:.4f}‚Ç¨
‚Ä¢ üìà Jours actifs: {len(weekly_data['days'])}
        """
    
    def can_make_request(self) -> tuple[bool, str]:
        """V√©rifie si une nouvelle requ√™te est autoris√©e"""
        today = datetime.now().strftime("%Y-%m-%d")
        daily_entry = next(
            (entry for entry in self.usage_data["daily_usage"] if entry["date"] == today), 
            None
        )
        
        current_cost = daily_entry["cost"] if daily_entry else 0.0
        
        if current_cost >= self.config.MAX_COST_PER_DAY:
            return False, f"‚ùå Budget quotidien √©puis√© ({current_cost:.2f}‚Ç¨/{self.config.MAX_COST_PER_DAY}‚Ç¨)"
        
        remaining = self.config.MAX_COST_PER_DAY - current_cost
        return True, f"‚úÖ Budget disponible: {remaining:.2f}‚Ç¨"

# Instance globale pour partager entre les modules
cost_monitor = CostMonitor()
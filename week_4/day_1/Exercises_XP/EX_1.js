// üß© EXERCISE 1 : SCOPE

// -------------------------------------------
// #1
function funcOne() {
    let a = 5;
    if (a > 1) {
        a = 3;
    }
    alert(`inside the funcOne function ${a}`);
}

funcOne();
// üß† Prediction: inside the funcOne function 3
// ‚úÖ Explication: 'a' est une variable locale. Elle vaut 5 au d√©but,
// puis devient 3 √† cause du if. La valeur affich√©e est donc 3.

// #1.2 Si on utilise const au lieu de let :
// ‚ùå Erreur: TypeError: Assignment to constant variable.
// ‚ö†Ô∏è On ne peut pas r√©assigner une variable d√©clar√©e avec const.


// -------------------------------------------
// #2
let a2 = 0; // ‚¨ÖÔ∏è renomm√©e pour √©viter le conflit

function funcTwo() {
    a2 = 5;
}

function funcThree() {
    alert(`inside the funcThree function ${a2}`);
}

funcThree();
// üß† Prediction: inside the funcThree function 0
// ‚úÖ 'a2' est globalement √©gale √† 0 avant tout changement.

funcTwo();
funcThree();
// üß† Prediction: inside the funcThree function 5
// ‚úÖ Apr√®s l‚Äôappel de funcTwo(), la variable globale 'a2' vaut 5.

// #2.2 Si on utilise const au lieu de let :
// ‚ùå Erreur: Assignment to constant variable.
// ‚ö†Ô∏è funcTwo essaie de r√©assigner 'a2', ce qui est interdit avec const.


// -------------------------------------------
// #3
function funcFour() {
    window.a3 = "hello"; // ‚¨ÖÔ∏è variable globale via window
}

function funcFive() {
    alert(`inside the funcFive function ${a3}`);
}

funcFour();
funcFive();
// üß† Prediction: inside the funcFive function hello
// ‚úÖ 'window.a3' cr√©e une variable globale accessible partout.


// -------------------------------------------
// #4
let a4 = 1; // ‚¨ÖÔ∏è renomm√©e

function funcSix() {
    let a4 = "test";
    alert(`inside the funcSix function ${a4}`);
}

funcSix();
// üß† Prediction: inside the funcSix function test
// ‚úÖ 'a4' √† l‚Äôint√©rieur de funcSix est une variable locale qui masque
// la variable globale (shadowing).

// #4.2 Si on utilise const au lieu de let :
// ‚úÖ Aucun probl√®me, car on ne r√©assigne pas la variable.


// -------------------------------------------
// #5
let a5 = 2; // ‚¨ÖÔ∏è renomm√©e

if (true) {
    let a5 = 5;
    alert(`in the if block ${a5}`);
}
alert(`outside of the if block ${a5}`);
// üß† Prediction:
// in the if block 5
// outside of the if block 2
// ‚úÖ Chaque bloc a sa propre port√©e (block scope). 
// 'a5' dans le if et 'a5' √† l‚Äôext√©rieur sont deux variables diff√©rentes.

// #5.2 Si on utilise const au lieu de let :
// ‚úÖ M√™me comportement : deux port√©es s√©par√©es, pas de r√©affectation.

// FILE.JS - Impl√©mentation compl√®te d'une file
class Queue {
    constructor() {
      this.items = [];
      this.front = 0;
      this.rear = 0;
    }
    
    // Ajouter un √©l√©ment (enqueue)
    enqueue(element) {
      this.items[this.rear] = element;
      this.rear++;
      console.log(`‚úì ${element} ajout√© √† la file`);
      return element;
    }
    
    // Retirer un √©l√©ment (dequeue)
    dequeue() {
      if (this.isEmpty()) {
        console.log("‚úó Impossible de retirer : file vide");
        return null;
      }
      const removedElement = this.items[this.front];
      delete this.items[this.front];
      this.front++;
      console.log(`‚Ü≥ ${removedElement} retir√© de la file`);
      return removedElement;
    }
    
    // Voir le premier √©l√©ment
    peek() {
      if (this.isEmpty()) {
        console.log("File vide - aucun √©l√©ment √† voir");
        return null;
      }
      const firstElement = this.items[this.front];
      console.log(`üëÅ Premier √©l√©ment: ${firstElement}`);
      return firstElement;
    }
    
    // V√©rifier si vide
    isEmpty() {
      return this.front === this.rear;
    }
    
    // Taille
    size() {
      return this.rear - this.front;
    }
    
    // Afficher la file
    print() {
      if (this.isEmpty()) {
        console.log("üì≠ File vide");
        return;
      }
      const elements = [];
      for (let i = this.front; i < this.rear; i++) {
        elements.push(this.items[i]);
      }
      console.log(`üìã File (${this.size()} √©l√©ments): ${elements.join(" <- ")}`);
    }
    
    // Vider
    clear() {
      this.items = [];
      this.front = 0;
      this.rear = 0;
      console.log("üßπ File vid√©e");
    }
    
    // Statistiques
    stats() {
      console.log("üìä Statistiques de la file:");
      console.log(`   - Taille: ${this.size()}`);
      console.log(`   - Est vide: ${this.isEmpty()}`);
      console.log(`   - Premier √©l√©ment: ${this.isEmpty() ? 'Aucun' : this.peek()}`);
    }
  }
  
  // ============================================================================
  // PROGRAMME DE TEST
  // ============================================================================
  
  function testQueue() {
    console.log("=".repeat(50));
    console.log("üß™ TEST DE LA FILE (QUEUE)");
    console.log("=".repeat(50));
    
    // Cr√©ation d'une file
    const file = new Queue();
    
    // Test 1: File vide
    console.log("\n1. TEST FILE VIDE");
    file.print();
    file.stats();
    file.dequeue();
    file.peek();
    
    // Test 2: Ajout d'√©l√©ments
    console.log("\n2. AJOUT D'√âL√âMENTS");
    file.enqueue("Client 1");
    file.enqueue("Client 2");
    file.enqueue("Client 3");
    file.enqueue("Client 4");
    file.print();
    
    // Test 3: Retrait d'√©l√©ments
    console.log("\n3. RETRAIT D'√âL√âMENTS");
    file.dequeue();
    file.dequeue();
    file.print();
    
    // Test 4: Voir le premier √©l√©ment
    console.log("\n4. CONSULTATION");
    file.peek();
    file.stats();
    
    // Test 5: Ajout apr√®s retrait
    console.log("\n5. AJOUT SUPPL√âMENTAIRE");
    file.enqueue("Client 5");
    file.enqueue("Client 6");
    file.print();
    
    // Test 6: Vider la file
    console.log("\n6. VIDAGE DE LA FILE");
    while (!file.isEmpty()) {
      file.dequeue();
    }
    file.print();
    file.stats();
    
    // Test 7: Sc√©nario r√©el (file d'attente)
    console.log("\n7. SC√âNARIO R√âEL - FILE D'ATTENTE BANQUE");
    const banque = new Queue();
    
    banque.enqueue("Madame Dupont");
    banque.enqueue("Monsieur Martin");
    banque.enqueue("Mademoiselle Leroy");
    
    console.log("\n√âtat de la file d'attente:");
    banque.print();
    
    console.log("\nGuichet 1 appelle:", banque.dequeue());
    console.log("Guichet 2 appelle:", banque.dequeue());
    
    banque.enqueue("Monsieur Bernard");
    
    console.log("\n√âtat final:");
    banque.print();
  }
  
  // ============================================================================
  // FONCTIONS UTILITAIRES
  // ============================================================================
  
  // Fonction pour simuler un traitement par lot
  function processBatch(queue, batchSize) {
    console.log(`\nüîÑ TRAITEMENT PAR LOT (${batchSize} √©l√©ments)`);
    let processed = 0;
    
    for (let i = 0; i < batchSize && !queue.isEmpty(); i++) {
      const element = queue.dequeue();
      if (element) {
        processed++;
        console.log(`   Traitement ${i + 1}: ${element}`);
      }
    }
    
    console.log(`‚úì ${processed} √©l√©ments trait√©s`);
    return processed;
  }
  
  // Fonction de d√©monstration
  function demonstration() {
    console.log("\n" + "=".repeat(50));
    console.log("üé≠ D√âMONSTRATION AVANC√âE");
    console.log("=".repeat(50));
    
    const demoQueue = new Queue();
    
    // Ajout multiple
    const elements = ["T√¢che A", "T√¢che B", "T√¢che C", "T√¢che D", "T√¢che E"];
    elements.forEach(el => demoQueue.enqueue(el));
    
    demoQueue.print();
    demoQueue.stats();
    
    // Traitement par lot
    processBatch(demoQueue, 3);
    demoQueue.print();
    
    // Ajout apr√®s traitement
    demoQueue.enqueue("T√¢che F");
    demoQueue.enqueue("T√¢che G");
    demoQueue.print();
    
    // Traitement du reste
    processBatch(demoQueue, 5);
    demoQueue.stats();
  }
  
  // ============================================================================
  // EX√âCUTION DU PROGRAMME
  // ============================================================================
  
  // Lancer les tests
  testQueue();
  
  // Lancer la d√©monstration
  demonstration();
  
  // Exemple d'export pour Node.js
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = { Queue, QueueOptimized };
  }